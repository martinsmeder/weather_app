(()=>{"use strict";var e={965:(e,t,n)=>{n.d(t,{c:()=>o,m:()=>r}),console.log("I get called from api.js!");const r={getWeatherByLocation:async e=>{try{const t=await fetch(`https://api.weatherapi.com/v1/current.json?key=ce6acc34934c47f3916181423232305&q=${e}`,{mode:"cors"});if(t.ok){const e=await t.json(),n=await(e=>({city:e.location.name,localTime:e.location.localtime,weatherIcon:e.current.condition.icon,weather:e.current.condition.text,temperatureC:e.current.temp_c,temperatureF:e.current.temp_f,feelsLikeC:e.current.feelslike_c,feelsLikeF:e.current.feelslike_f,humidity:e.current.humidity,windSpeed:e.current.wind_kph,windDirection:e.current.wind_dir,visibility:e.current.vis_km,isDay:1===e.current.is_day}))(e);return n}throw new Error("Unable to fetch weather data.")}catch(e){throw console.error("An error occurred:",e.message),e}}},o={switchBackground:e=>{const{isDay:t,weather:n}=e;let r;return r=t?n.toLowerCase().includes("sun")?"images/sunny_day.jpg":n.toLowerCase().includes("cloud")?"images/cloudy_day.jpg":n.toLowerCase().includes("rain")?"images/rainy_day.jpg":n.toLowerCase().includes("snow")?"images/snowy_day.jpg":n.toLowerCase().includes("fog")?"images/foggy_day.jpg":"images/default_day.jpg":n.toLowerCase().includes("clear")?"images/clear_night.jpg":n.toLowerCase().includes("cloud")?"images/cloudy_night.jpg":n.toLowerCase().includes("rain")?"images/rainy_night.jpg":n.toLowerCase().includes("snow")?"images/snowy_night.jpg":n.toLowerCase().includes("fog")?"images/foggy_night.jpg":"images/default_night.jpg",console.log("Background URL:",r),r}};(async()=>{try{const e=await r.getWeatherByLocation("stockholm");console.log(e),o.switchBackground(e)}catch(e){console.error("Error occurred during weather retrieval:",e)}})()},24:(e,t,n)=>{var r=n(965);console.log("this seem to be working"),(()=>{const e=document.querySelector("#searchLocation"),t=document.querySelector("#searchBtn"),n=document.querySelector("#toggleBtn"),o=document.querySelector("#dataContainer");let c=null,i=!0,a=!0;const s=()=>{if(!c)return;const{city:e,localTime:t,weatherIcon:n,weather:r,temperatureC:s,temperatureF:d,feelsLikeC:l,feelsLikeF:u,humidity:m,windSpeed:p,windDirection:g,visibility:h}=c;for(;o.firstChild;)o.firstChild.remove();const y=document.createElement("h2");y.textContent=e,o.appendChild(y);const w=document.createElement("p"),C=t.split(" ")[1];w.textContent=C,o.appendChild(w);const f=document.createElement("img");f.src=n,f.alt=r,o.appendChild(f);const k=document.createElement("p");k.textContent=`Weather: ${r}`,o.appendChild(k);const L=document.createElement("p"),_=i?s:d;L.textContent=`Temperature: ${_}°${i?"C":"F"}`,o.appendChild(L);const v=document.createElement("p"),j=a?l:u;v.textContent=`Feels Like: ${j}°${i?"C":"F"}`,o.appendChild(v);const E=document.createElement("p");E.textContent=`Humidity: ${m}%`,o.appendChild(E);const x=document.createElement("p");x.textContent=`Wind Speed: ${p} km/h`,o.appendChild(x);const $=document.createElement("p");$.textContent=`Wind Direction: ${g}`,o.appendChild($);const b=document.createElement("p");b.textContent=`Visibility: ${h} km`,o.appendChild(b)},d=async t=>{t.preventDefault();const n=e.value;try{c=await r.m.getWeatherByLocation(n),s();const e=r.c.switchBackground(c);document.body.style.backgroundImage=`url(${e})`}catch(e){console.error("Error occurred during weather retrieval:",e)}};return{init:()=>{t.addEventListener("click",d),e.addEventListener("keydown",(e=>{13===e.keyCode&&d(e)})),n.addEventListener("click",(()=>{i=!i,a=!a,s(),n.textContent=i?"Celsius":"Fahrenheit"}))},renderData:s}})().init()}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var c=t[r]={exports:{}};return e[r](c,c.exports,n),c.exports}n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n(965),n(24)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,