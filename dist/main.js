(()=>{"use strict";var e={965:(e,t,n)=>{n.d(t,{c:()=>r,m:()=>o}),console.log("I get called from api.js!");const o={getWeatherByLocation:async e=>{try{const t=await fetch(`https://api.weatherapi.com/v1/current.json?key=ce6acc34934c47f3916181423232305&q=${e}`,{mode:"cors"});if(t.ok){const e=await t.json(),n=await(e=>({city:e.location.name,localTime:e.location.localtime,weatherIcon:e.current.condition.icon,weather:e.current.condition.text,temperature:e.current.temp_c,feelsLike:e.current.feelslike_c,humidity:e.current.humidity,windSpeed:e.current.wind_kph,windDirection:e.current.wind_dir,visibility:e.current.vis_km,isDay:1===e.current.is_day}))(e);return n}throw new Error("Unable to fetch weather data.")}catch(e){throw console.error("An error occurred:",e.message),e}}},r=(()=>{let e=!1;return{toggleUnit:t=>{const n=t.map((t=>e?5*(t-32)/9:9*t/5+32));return e=!e,n},switchBackground:e=>{const{isDay:t,weather:n}=e;let o;if(t)switch(n){case"Sunny":o="sunny-day-background.jpg";break;case"Clear":o="clear-day-background.jpg";break;case"Cloud":case"Partly cloudy":o="cloudy-day-background.jpg";break;case"Rain":o="rainy-day-background.jpg";break;case"Snow":o="snowy-day-background.jpg";break;case"Fog":o="foggy-day-background.jpg";break;default:o="default-day-background.jpg"}else switch(n){case"Clear":o="clear-night-background.jpg";break;case"Cloud":case"Partly cloudy":o="cloudy-night-background.jpg";break;case"Rain":o="rainy-night-background.jpg";break;case"Snow":o="snowy-night-background.jpg";break;case"Fog":o="foggy-night-background.jpg";break;default:o="default-night-background.jpg"}console.log("Background URL:",o)}}})();(async()=>{try{const e=await o.getWeatherByLocation("stockholm");console.log(e),r.switchBackground(e)}catch(e){console.error("Error occurred during weather retrieval:",e)}})();let c=[25],a=[25];console.log(`Temperature in Celsius: ${c}`),c=r.toggleUnit(c),console.log(`Temperature in Fahrenheit: ${c}`),c=r.toggleUnit(c),console.log(`Temperature in Celsius: ${c}`),console.log(`Feels Like in Celsius: ${a}`),a=r.toggleUnit(a),console.log(`Feels Like in Fahrenheit: ${a}`),a=r.toggleUnit(a),console.log(`Feels Like in Celsius: ${a}`)},24:(e,t,n)=>{var o=n(965);console.log("this seem to be working"),(()=>{const e=document.querySelector("#searchLocation"),t=document.querySelector("#searchBtn"),n=document.querySelector("#toggleBtn"),r=document.querySelector("#dataContainer"),c=e=>{const{city:t,localTime:n,weatherIcon:o,weather:c,temperature:a,feelsLike:i,humidity:l,windSpeed:s,windDirection:d,visibility:u}=e;for(;r.firstChild;)r.firstChild.remove();const g=document.createElement("h2");g.textContent=t,r.appendChild(g);const p=document.createElement("p"),h=n.split(" ")[1];p.textContent=h,r.appendChild(p);const m=document.createElement("img");m.src=o,m.alt=c,r.appendChild(m);const y=document.createElement("p");y.textContent=`Weather: ${c}`,r.appendChild(y);const k=document.createElement("p");k.textContent=`Temperature: ${a}째C`,k.classList.add("temperature"),r.appendChild(k);const C=document.createElement("p");C.textContent=`Feels Like: ${i}째C`,C.classList.add("feels-like"),r.appendChild(C);const w=document.createElement("p");w.textContent=`Humidity: ${l}%`,r.appendChild(w);const b=document.createElement("p");b.textContent=`Wind Speed: ${s} km/h`,r.appendChild(b);const f=document.createElement("p");f.textContent=`Wind Direction: ${d}`,r.appendChild(f);const j=document.createElement("p");j.textContent=`Visibility: ${u} km`,r.appendChild(j)},a=async t=>{t.preventDefault();const n=e.value;try{const e=await o.m.getWeatherByLocation(n);c(e)}catch(e){console.error("Error occurred during weather retrieval:",e)}},i=()=>{const e=document.querySelectorAll(".temperature"),t=document.querySelectorAll(".feels-like");e.forEach((e=>{const t=parseInt(e.textContent),n=o.c.toggleUnit(t);e.textContent=`${n}째C`})),t.forEach((e=>{const t=parseInt(e.textContent),n=o.c.toggleUnit(t);e.textContent=`${n}째C`}))};return{init:()=>{t.addEventListener("click",a),e.addEventListener("keydown",(e=>{13===e.keyCode&&a(e)})),n.addEventListener("click",(()=>{i()}))},renderData:c,toggleUnits:i}})().init()}},t={};function n(o){var r=t[o];if(void 0!==r)return r.exports;var c=t[o]={exports:{}};return e[o](c,c.exports,n),c.exports}n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n(965),n(24)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,