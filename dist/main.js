(()=>{console.log("I get called from api.js!");const e=async e=>{try{const r=await fetch(`https://api.weatherapi.com/v1/current.json?key=ce6acc34934c47f3916181423232305&q=${e}`,{mode:"cors"});if(r.ok){const e=await r.json(),a=await(e=>({allData:e,city:e.location.name,region:e.location.region,country:e.location.country,localTime:e.location.localtime,weatherIcon:e.current.condition.icon,weather:e.current.condition.text,temperature:e.current.temp_c,feelsLike:e.current.feelslike_c,humidity:e.current.humidity,windSpeed:e.current.wind_kph,windDirection:e.current.wind_dir,visibility:e.current.vis_km,isDay:1===e.current.is_day}))(e);return a}throw new Error("Unable to fetch weather data.")}catch(e){throw console.error("An error occurred:",e.message),e}},r=(()=>{let e=!1;return{toggleUnit:r=>{let a=r;return a=e?5*(r-32)/9:9*r/5+32,e=!e,a},switchBackground:e=>{const{isDay:r,weather:a}=e;let c;if(r)switch(a){case"Sunny":c="sunny-day-background.jpg";break;case"Clear":c="clear-day-background.jpg";break;case"Cloud":case"Partly cloudy":c="cloudy-day-background.jpg";break;case"Rain":c="rainy-day-background.jpg";break;case"Snow":c="snowy-day-background.jpg";break;case"Fog":c="foggy-day-background.jpg";break;default:c="default-day-background.jpg"}else switch(a){case"Clear":c="clear-night-background.jpg";break;case"Cloud":case"Partly cloudy":c="cloudy-night-background.jpg";break;case"Rain":c="rainy-night-background.jpg";break;case"Snow":c="snowy-night-background.jpg";break;case"Fog":c="foggy-night-background.jpg";break;default:c="default-night-background.jpg"}console.log("Background URL:",c)}}})();(async()=>{try{const a=await e("stockholm");console.log(a),r.switchBackground(a)}catch(e){console.error("Error occurred during weather retrieval:",e)}})()})(),console.log("this seem to be working");
//# sourceMappingURL=data:application/json;charset=utf-8;base64,