(()=>{console.log("I get called from api.js!");const e=async e=>{try{const a=await fetch(`https://api.weatherapi.com/v1/current.json?key=ce6acc34934c47f3916181423232305&q=${e}`,{mode:"cors"});if(a.ok){const e=await a.json(),r=await(e=>({temperature:e.current.temp_c,humidity:e.current.humidity,weather:e.current.condition.text,isDay:1===e.current.is_day}))(e);return r}throw new Error("Unable to fetch weather data.")}catch(e){throw console.error("An error occurred:",e.message),e}},a=(()=>{let e=!1;return{toggleUnit:a=>{let r=a;return r=e?5*(a-32)/9:9*a/5+32,e=!e,r},switchBackground:e=>{const{isDay:a,weather:r}=e;let o;if(a)switch(r){case"Sunny":o="sunny-day-background.jpg";break;case"Clear":o="clear-day-background.jpg";break;case"Cloud":case"Partly cloudy":o="cloudy-day-background.jpg";break;case"Rain":o="rainy-day-background.jpg";break;case"Snow":o="snowy-day-background.jpg";break;case"Fog":o="foggy-day-background.jpg";break;default:o="default-day-background.jpg"}else switch(r){case"Clear":o="clear-night-background.jpg";break;case"Cloud":case"Partly cloudy":o="cloudy-night-background.jpg";break;case"Rain":o="rainy-night-background.jpg";break;case"Snow":o="snowy-night-background.jpg";break;case"Fog":o="foggy-night-background.jpg";break;default:o="default-night-background.jpg"}console.log("Background URL:",o)}}})();(async()=>{try{const r=await e("stockholm");console.log(r),a.switchBackground(r)}catch(e){console.error("Error occurred during weather retrieval:",e)}})();let r=25;console.log(`Temperature in Celsius: ${r}`),r=a.toggleUnit(r),console.log(`Temperature in Fahrenheit: ${r}`),r=a.toggleUnit(r),console.log(`Temperature in Celsius: ${r}`)})(),console.log("this seem to be working");
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsIm1hcHBpbmdzIjoiTUFBQUEsUUFBUUMsSUFBSSw2QkFRWixNQUFNQyxFQVd5QkMsTUFBT0MsSUFDbEMsSUFDRSxNQUFNQyxRQUFpQkMsTUFDckIsb0ZBQW9GRixJQUNwRixDQUFFRyxLQUFNLFNBRVYsR0FBS0YsRUFBU0csR0FFUCxDQUNMLE1BQU1DLFFBQWFKLEVBQVNLLE9BQ3RCQyxPQXBCUSxDQUFDRixJQUNHLENBQ3BCRyxZQUFhSCxFQUFLSSxRQUFRQyxPQUMxQkMsU0FBVU4sRUFBS0ksUUFBUUUsU0FDdkJDLFFBQVNQLEVBQUtJLFFBQVFJLFVBQVVDLEtBQ2hDQyxNQUErQixJQUF4QlYsRUFBS0ksUUFBUU8sU0FlTUMsQ0FBWVosR0FDcEMsT0FBT0UsQ0FDVCxDQUxFLE1BQU0sSUFBSVcsTUFBTSxnQ0FNcEIsQ0FBRSxNQUFPQyxHQUVQLE1BREF2QixRQUFRdUIsTUFBTSxxQkFBc0JBLEVBQU1DLFNBQ3BDRCxDQUNSLEdBUUVFLEVBQVEsTUFDWixJQUFJQyxHQUFlLEVBc0VuQixNQUFPLENBQ0xDLFdBckVrQmYsSUFDbEIsSUFBSWdCLEVBQWdCaEIsRUFRcEIsT0FORWdCLEVBREVGLEVBQ29DLEdBQXBCZCxFQUFjLElBQVcsRUFFWixFQUFkQSxFQUFtQixFQUFJLEdBRzFDYyxHQUFnQkEsRUFDVEUsQ0FBYSxFQTZEcEJDLGlCQTFEd0JsQixJQUN4QixNQUFNLE1BQUVRLEVBQUssUUFBRUgsR0FBWUwsRUFDM0IsSUFBSW1CLEVBRUosR0FBSVgsRUFDRixPQUFRSCxHQUNOLElBQUssUUFDSGMsRUFBZ0IsMkJBQ2hCLE1BQ0YsSUFBSyxRQUNIQSxFQUFnQiwyQkFDaEIsTUFDRixJQUFLLFFBQ0wsSUFBSyxnQkFDSEEsRUFBZ0IsNEJBQ2hCLE1BQ0YsSUFBSyxPQUNIQSxFQUFnQiwyQkFDaEIsTUFDRixJQUFLLE9BQ0hBLEVBQWdCLDJCQUNoQixNQUNGLElBQUssTUFDSEEsRUFBZ0IsMkJBQ2hCLE1BQ0YsUUFDRUEsRUFBZ0Isa0NBSXBCLE9BQVFkLEdBQ04sSUFBSyxRQUNIYyxFQUFnQiw2QkFDaEIsTUFDRixJQUFLLFFBQ0wsSUFBSyxnQkFDSEEsRUFBZ0IsOEJBQ2hCLE1BQ0YsSUFBSyxPQUNIQSxFQUFnQiw2QkFDaEIsTUFDRixJQUFLLE9BQ0hBLEVBQWdCLDZCQUNoQixNQUNGLElBQUssTUFDSEEsRUFBZ0IsNkJBQ2hCLE1BQ0YsUUFDRUEsRUFBZ0IsK0JBS3RCOUIsUUFBUUMsSUFBSSxrQkFBbUI2QixFQUFjLEVBT2hELEVBM0VhLEdBOEVkLFdBQ0UsSUFDRSxNQUFNQyxRQUFvQjdCLEVBQTRCLGFBQ3RERixRQUFRQyxJQUFJOEIsR0FDWk4sRUFBTUksaUJBQWlCRSxFQUN6QixDQUFFLE1BQU9SLEdBQ1B2QixRQUFRdUIsTUFBTSwyQ0FBNENBLEVBQzVELENBQ0QsRUFSRCxHQVVBLElBQUlYLEVBQWMsR0FDbEJaLFFBQVFDLElBQUksMkJBQTJCVyxLQUN2Q0EsRUFBY2EsRUFBTUUsV0FBV2YsR0FDL0JaLFFBQVFDLElBQUksOEJBQThCVyxLQUMxQ0EsRUFBY2EsRUFBTUUsV0FBV2YsR0FDL0JaLFFBQVFDLElBQUksMkJBQTJCVyxJLEtDeEl2Q1osUUFBUUMsSUFBSSIsInNvdXJjZXMiOlsid2VicGFjazovL3dlYXRoZXJfYXBwLy4vc3JjL2FwaS5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyX2FwcC8uL3NyYy9pbnRlcmZhY2UuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc29sZS5sb2coXCJJIGdldCBjYWxsZWQgZnJvbSBhcGkuanMhXCIpO1xuXG4vLyBUTyBETzpcbi8vIDEuIE1vcmUgZGF0YSBwcm9wZXJ0aWVzIGluIHByb2Nlc3NEYXRhXG4vLyAyLiBQbGFuIGludGVyZmFjZVxuLy8gMy4gQ2hhbmdlIG5hbWUgb2YgbW9kdWxlIHRvIGFwcExvZ2ljPyBJZiBub3QgdG9vIG11Y2ggY29kZSBoZXJlXG4vLyA0LiBTdGFydCBidWlsZGluZyBpbnRlcmZhY2VcblxuY29uc3QgSGl0QVBJID0gKCgpID0+IHtcbiAgY29uc3QgcHJvY2Vzc0RhdGEgPSAoZGF0YSkgPT4ge1xuICAgIGNvbnN0IHByb2Nlc3NlZERhdGEgPSB7XG4gICAgICB0ZW1wZXJhdHVyZTogZGF0YS5jdXJyZW50LnRlbXBfYyxcbiAgICAgIGh1bWlkaXR5OiBkYXRhLmN1cnJlbnQuaHVtaWRpdHksXG4gICAgICB3ZWF0aGVyOiBkYXRhLmN1cnJlbnQuY29uZGl0aW9uLnRleHQsXG4gICAgICBpc0RheTogZGF0YS5jdXJyZW50LmlzX2RheSA9PT0gMSxcbiAgICB9O1xuICAgIHJldHVybiBwcm9jZXNzZWREYXRhO1xuICB9O1xuXG4gIGNvbnN0IGdldFdlYXRoZXJCeUxvY2F0aW9uID0gYXN5bmMgKGxvY2F0aW9uKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goXG4gICAgICAgIGBodHRwczovL2FwaS53ZWF0aGVyYXBpLmNvbS92MS9jdXJyZW50Lmpzb24/a2V5PWNlNmFjYzM0OTM0YzQ3ZjM5MTYxODE0MjMyMzIzMDUmcT0ke2xvY2F0aW9ufWAsXG4gICAgICAgIHsgbW9kZTogXCJjb3JzXCIgfVxuICAgICAgKTtcbiAgICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5hYmxlIHRvIGZldGNoIHdlYXRoZXIgZGF0YS5cIik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgICAgICBjb25zdCBmaW5hbERhdGEgPSBhd2FpdCBwcm9jZXNzRGF0YShkYXRhKTtcbiAgICAgICAgcmV0dXJuIGZpbmFsRGF0YTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcihcIkFuIGVycm9yIG9jY3VycmVkOlwiLCBlcnJvci5tZXNzYWdlKTtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4ge1xuICAgIGdldFdlYXRoZXJCeUxvY2F0aW9uLFxuICB9O1xufSkoKTtcblxuY29uc3QgVXRpbHMgPSAoKCkgPT4ge1xuICBsZXQgaXNGYWhyZW5oZWl0ID0gZmFsc2U7XG5cbiAgY29uc3QgdG9nZ2xlVW5pdCA9ICh0ZW1wZXJhdHVyZSkgPT4ge1xuICAgIGxldCBjb252ZXJ0ZWRUZW1wID0gdGVtcGVyYXR1cmU7XG4gICAgaWYgKGlzRmFocmVuaGVpdCkge1xuICAgICAgY29udmVydGVkVGVtcCA9ICgodGVtcGVyYXR1cmUgLSAzMikgKiA1KSAvIDk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnZlcnRlZFRlbXAgPSAodGVtcGVyYXR1cmUgKiA5KSAvIDUgKyAzMjtcbiAgICB9XG5cbiAgICBpc0ZhaHJlbmhlaXQgPSAhaXNGYWhyZW5oZWl0O1xuICAgIHJldHVybiBjb252ZXJ0ZWRUZW1wO1xuICB9O1xuXG4gIGNvbnN0IHN3aXRjaEJhY2tncm91bmQgPSAoZmluYWxEYXRhKSA9PiB7XG4gICAgY29uc3QgeyBpc0RheSwgd2VhdGhlciB9ID0gZmluYWxEYXRhO1xuICAgIGxldCBiYWNrZ3JvdW5kVXJsO1xuXG4gICAgaWYgKGlzRGF5KSB7XG4gICAgICBzd2l0Y2ggKHdlYXRoZXIpIHtcbiAgICAgICAgY2FzZSBcIlN1bm55XCI6XG4gICAgICAgICAgYmFja2dyb3VuZFVybCA9IFwic3VubnktZGF5LWJhY2tncm91bmQuanBnXCI7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJDbGVhclwiOlxuICAgICAgICAgIGJhY2tncm91bmRVcmwgPSBcImNsZWFyLWRheS1iYWNrZ3JvdW5kLmpwZ1wiO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiQ2xvdWRcIjpcbiAgICAgICAgY2FzZSBcIlBhcnRseSBjbG91ZHlcIjpcbiAgICAgICAgICBiYWNrZ3JvdW5kVXJsID0gXCJjbG91ZHktZGF5LWJhY2tncm91bmQuanBnXCI7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJSYWluXCI6XG4gICAgICAgICAgYmFja2dyb3VuZFVybCA9IFwicmFpbnktZGF5LWJhY2tncm91bmQuanBnXCI7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJTbm93XCI6XG4gICAgICAgICAgYmFja2dyb3VuZFVybCA9IFwic25vd3ktZGF5LWJhY2tncm91bmQuanBnXCI7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJGb2dcIjpcbiAgICAgICAgICBiYWNrZ3JvdW5kVXJsID0gXCJmb2dneS1kYXktYmFja2dyb3VuZC5qcGdcIjtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBiYWNrZ3JvdW5kVXJsID0gXCJkZWZhdWx0LWRheS1iYWNrZ3JvdW5kLmpwZ1wiO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzd2l0Y2ggKHdlYXRoZXIpIHtcbiAgICAgICAgY2FzZSBcIkNsZWFyXCI6XG4gICAgICAgICAgYmFja2dyb3VuZFVybCA9IFwiY2xlYXItbmlnaHQtYmFja2dyb3VuZC5qcGdcIjtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcIkNsb3VkXCI6XG4gICAgICAgIGNhc2UgXCJQYXJ0bHkgY2xvdWR5XCI6XG4gICAgICAgICAgYmFja2dyb3VuZFVybCA9IFwiY2xvdWR5LW5pZ2h0LWJhY2tncm91bmQuanBnXCI7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJSYWluXCI6XG4gICAgICAgICAgYmFja2dyb3VuZFVybCA9IFwicmFpbnktbmlnaHQtYmFja2dyb3VuZC5qcGdcIjtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcIlNub3dcIjpcbiAgICAgICAgICBiYWNrZ3JvdW5kVXJsID0gXCJzbm93eS1uaWdodC1iYWNrZ3JvdW5kLmpwZ1wiO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiRm9nXCI6XG4gICAgICAgICAgYmFja2dyb3VuZFVybCA9IFwiZm9nZ3ktbmlnaHQtYmFja2dyb3VuZC5qcGdcIjtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBiYWNrZ3JvdW5kVXJsID0gXCJkZWZhdWx0LW5pZ2h0LWJhY2tncm91bmQuanBnXCI7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc29sZS5sb2coXCJCYWNrZ3JvdW5kIFVSTDpcIiwgYmFja2dyb3VuZFVybCk7XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICB0b2dnbGVVbml0LFxuICAgIHN3aXRjaEJhY2tncm91bmQsXG4gIH07XG59KSgpO1xuXG4vLyBVc2FnZSB3aXRoIGVycm9yIGhhbmRsaW5nXG4oYXN5bmMgKCkgPT4ge1xuICB0cnkge1xuICAgIGNvbnN0IHdlYXRoZXJEYXRhID0gYXdhaXQgSGl0QVBJLmdldFdlYXRoZXJCeUxvY2F0aW9uKFwic3RvY2tob2xtXCIpO1xuICAgIGNvbnNvbGUubG9nKHdlYXRoZXJEYXRhKTtcbiAgICBVdGlscy5zd2l0Y2hCYWNrZ3JvdW5kKHdlYXRoZXJEYXRhKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiRXJyb3Igb2NjdXJyZWQgZHVyaW5nIHdlYXRoZXIgcmV0cmlldmFsOlwiLCBlcnJvcik7XG4gIH1cbn0pKCk7XG5cbmxldCB0ZW1wZXJhdHVyZSA9IDI1O1xuY29uc29sZS5sb2coYFRlbXBlcmF0dXJlIGluIENlbHNpdXM6ICR7dGVtcGVyYXR1cmV9YCk7XG50ZW1wZXJhdHVyZSA9IFV0aWxzLnRvZ2dsZVVuaXQodGVtcGVyYXR1cmUpO1xuY29uc29sZS5sb2coYFRlbXBlcmF0dXJlIGluIEZhaHJlbmhlaXQ6ICR7dGVtcGVyYXR1cmV9YCk7XG50ZW1wZXJhdHVyZSA9IFV0aWxzLnRvZ2dsZVVuaXQodGVtcGVyYXR1cmUpO1xuY29uc29sZS5sb2coYFRlbXBlcmF0dXJlIGluIENlbHNpdXM6ICR7dGVtcGVyYXR1cmV9YCk7XG4iLCJjb25zb2xlLmxvZyhcInRoaXMgc2VlbSB0byBiZSB3b3JraW5nXCIpO1xuIl0sIm5hbWVzIjpbImNvbnNvbGUiLCJsb2ciLCJIaXRBUEkiLCJhc3luYyIsImxvY2F0aW9uIiwicmVzcG9uc2UiLCJmZXRjaCIsIm1vZGUiLCJvayIsImRhdGEiLCJqc29uIiwiZmluYWxEYXRhIiwidGVtcGVyYXR1cmUiLCJjdXJyZW50IiwidGVtcF9jIiwiaHVtaWRpdHkiLCJ3ZWF0aGVyIiwiY29uZGl0aW9uIiwidGV4dCIsImlzRGF5IiwiaXNfZGF5IiwicHJvY2Vzc0RhdGEiLCJFcnJvciIsImVycm9yIiwibWVzc2FnZSIsIlV0aWxzIiwiaXNGYWhyZW5oZWl0IiwidG9nZ2xlVW5pdCIsImNvbnZlcnRlZFRlbXAiLCJzd2l0Y2hCYWNrZ3JvdW5kIiwiYmFja2dyb3VuZFVybCIsIndlYXRoZXJEYXRhIl0sInNvdXJjZVJvb3QiOiIifQ==