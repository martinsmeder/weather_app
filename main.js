(()=>{"use strict";var e={965:(e,t,n)=>{n.d(t,{m:()=>r}),console.log("I get called from api.js!");const r={getWeatherByLocation:async e=>{try{const t=await fetch(`https://api.weatherapi.com/v1/current.json?key=ce6acc34934c47f3916181423232305&q=${e}`,{mode:"cors"});if(t.ok){const e=await t.json(),n=await(e=>({city:e.location.name,localTime:e.location.localtime,weatherIcon:e.current.condition.icon,weather:e.current.condition.text,temperatureC:e.current.temp_c,temperatureF:e.current.temp_f,feelsLikeC:e.current.feelslike_c,feelsLikeF:e.current.feelslike_f,humidity:e.current.humidity,windSpeed:e.current.wind_kph,windDirection:e.current.wind_dir,visibility:e.current.vis_km,isDay:1===e.current.is_day}))(e);return n}throw new Error("Unable to fetch weather data.")}catch(e){throw console.error("An error occurred:",e.message),e}}},o=e=>{const{isDay:t,weather:n}=e;let r;if(t)switch(n){case"Sunny":r="sunny-day-background.jpg";break;case"Clear":r="clear-day-background.jpg";break;case"Cloud":case"Partly cloudy":r="cloudy-day-background.jpg";break;case"Rain":r="rainy-day-background.jpg";break;case"Snow":r="snowy-day-background.jpg";break;case"Fog":r="foggy-day-background.jpg";break;default:r="default-day-background.jpg"}else switch(n){case"Clear":r="clear-night-background.jpg";break;case"Cloud":case"Partly cloudy":r="cloudy-night-background.jpg";break;case"Rain":r="rainy-night-background.jpg";break;case"Snow":r="snowy-night-background.jpg";break;case"Fog":r="foggy-night-background.jpg";break;default:r="default-night-background.jpg"}console.log("Background URL:",r)};(async()=>{try{const e=await r.getWeatherByLocation("stockholm");console.log(e),o(e)}catch(e){console.error("Error occurred during weather retrieval:",e)}})()},24:(e,t,n)=>{var r=n(965);console.log("this seem to be working"),(()=>{const e=document.querySelector("#searchLocation"),t=document.querySelector("#searchBtn"),n=document.querySelector("#toggleBtn"),o=document.querySelector("#dataContainer");let c=null,a=!0;const i=e=>{if(!c)return;const{city:t,localTime:n,weatherIcon:r,weather:i,temperatureC:d,temperatureF:l,feelsLikeC:s,feelsLikeF:u,humidity:p,windSpeed:g,windDirection:m,visibility:h}=c;for(;o.firstChild;)o.firstChild.remove();const y=document.createElement("h2");y.textContent=t,o.appendChild(y);const k=document.createElement("p"),C=n.split(" ")[1];k.textContent=C,o.appendChild(k);const b=document.createElement("img");b.src=r,b.alt=i,o.appendChild(b);const w=document.createElement("p");w.textContent=`Weather: ${i}`,o.appendChild(w);const f=document.createElement("p"),j=a?d:l;f.textContent=`Temperature: ${j}°${a?"C":"F"}`,o.appendChild(f);const v=document.createElement("p"),E=e?s:u;v.textContent=`Feels Like: ${E}°${a?"C":"F"}`,o.appendChild(v);const x=document.createElement("p");x.textContent=`Humidity: ${p}%`,o.appendChild(x);const L=document.createElement("p");L.textContent=`Wind Speed: ${g} km/h`,o.appendChild(L);const S=document.createElement("p");S.textContent=`Wind Direction: ${m}`,o.appendChild(S);const $=document.createElement("p");$.textContent=`Visibility: ${h} km`,o.appendChild($)},d=async t=>{t.preventDefault();const n=e.value;try{c=await r.m.getWeatherByLocation(n),i(!0)}catch(e){console.error("Error occurred during weather retrieval:",e)}};return{init:()=>{t.addEventListener("click",d),e.addEventListener("keydown",(e=>{13===e.keyCode&&d(e)})),n.addEventListener("click",(()=>{a=!a,i(a)}))},renderData:i}})().init()}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var c=t[r]={exports:{}};return e[r](c,c.exports,n),c.exports}n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n(965),n(24)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,